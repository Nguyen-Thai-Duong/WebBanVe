package DAO;

import DBContext.DBContext;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.sql.Types;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.User;

/**
 * Shared JDBC helper used by admin screens to manage role-specific user accounts.
 */
public class RoleBasedUserDAO {

    private static final Logger LOGGER = Logger.getLogger(RoleBasedUserDAO.class.getName());

    private final String role;

    public RoleBasedUserDAO(String role) {
        if (role == null || role.isBlank()) {
            throw new IllegalArgumentException("Role must not be null or blank");
        }
        this.role = role;
    }

    public String getRole() {
        return role;
    }

    private String baseSelect() {
        return "SELECT UserID, EmployeeCode, FullName, Email, PhoneNumber, Role, Status, Address, CreatedAt, UpdatedAt "
                + "FROM [USER] WHERE Role = ?";
    }

    public List<User> findAll() {
        String sql = baseSelect() + " ORDER BY CreatedAt DESC, UserID DESC";
        try (DBContext db = new DBContext()) {
            Connection conn = db.getConnection();
            if (conn == null) {
                LOGGER.log(Level.SEVERE, "Database connection is null when loading users for role {0}", role);
                return Collections.emptyList();
            }
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, role);
                try (ResultSet rs = ps.executeQuery()) {
                    List<User> users = new ArrayList<>();
                    while (rs.next()) {
                        users.add(mapUser(rs));
                    }
                    return users;
                }
            }
        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, "Failed to load users for role " + role, ex);
            return Collections.emptyList();
        }
    }

    public User findById(int userId) {
        String sql = baseSelect() + " AND UserID = ?";
        try (DBContext db = new DBContext()) {
            Connection conn = db.getConnection();
            if (conn == null) {
                LOGGER.log(Level.SEVERE, "Database connection is null when finding {0} by id {1}", new Object[]{role, userId});
                return null;
            }
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, role);
                ps.setInt(2, userId);
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        return mapUser(rs);
                    }
                }
            }
        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, "Failed to find " + role + " account id " + userId, ex);
        }
        return null;
    }

    public boolean insert(User user) {
        Objects.requireNonNull(user, "User must not be null");
        if (user.getPasswordHash() == null || user.getPasswordHash().isBlank()) {
            throw new IllegalArgumentException("Password hash is required when creating " + role + " account");
        }
        String sql = "INSERT INTO [USER] (EmployeeCode, FullName, Email, PasswordHash, PhoneNumber, Role, Status, Address, CreatedAt, UpdatedAt) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        LocalDateTime now = LocalDateTime.now();
        try (DBContext db = new DBContext()) {
            Connection conn = db.getConnection();
            if (conn == null) {
                LOGGER.log(Level.SEVERE, "Database connection is null when inserting user for role {0}", role);
                return false;
            }
            try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                ps.setNull(1, Types.NVARCHAR); // EmployeeCode is generated by computed column
                ps.setString(2, user.getFullName());
                ps.setString(3, user.getEmail());
                ps.setString(4, user.getPasswordHash());
                ps.setString(5, user.getPhoneNumber());
                ps.setString(6, role);
                ps.setString(7, normalizeStatus(user.getStatus()));
                if (user.getAddress() != null && !user.getAddress().isBlank()) {
                    ps.setString(8, user.getAddress());
                } else {
                    ps.setNull(8, Types.NVARCHAR);
                }
                setTimestamp(ps, 9, now);
                setTimestamp(ps, 10, now);
                int affected = ps.executeUpdate();
                if (affected > 0) {
                    try (ResultSet keys = ps.getGeneratedKeys()) {
                        if (keys.next()) {
                            user.setUserId(keys.getInt(1));
                        }
                    }
                }
                return affected > 0;
            }
        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, "Failed to insert user for role " + role, ex);
            return false;
        }
    }

    public boolean update(User user) {
        Objects.requireNonNull(user, "User must not be null");
        if (user.getUserId() == null) {
            throw new IllegalArgumentException("User id is required for update");
        }
        boolean updatePassword = user.getPasswordHash() != null && !user.getPasswordHash().isBlank();
        StringBuilder sql = new StringBuilder("UPDATE [USER] SET FullName = ?, Email = ?, PhoneNumber = ?, Status = ?, Address = ?, UpdatedAt = ?");
        if (updatePassword) {
            sql.append(", PasswordHash = ?");
        }
        sql.append(" WHERE UserID = ? AND Role = ?");

        try (DBContext db = new DBContext()) {
            Connection conn = db.getConnection();
            if (conn == null) {
                LOGGER.log(Level.SEVERE, "Database connection is null when updating user for role {0}", role);
                return false;
            }
            try (PreparedStatement ps = conn.prepareStatement(sql.toString())) {
                int idx = 1;
                ps.setString(idx++, user.getFullName());
                ps.setString(idx++, user.getEmail());
                ps.setString(idx++, user.getPhoneNumber());
                ps.setString(idx++, normalizeStatus(user.getStatus()));
                if (user.getAddress() != null && !user.getAddress().isBlank()) {
                    ps.setString(idx++, user.getAddress());
                } else {
                    ps.setNull(idx++, Types.NVARCHAR);
                }
                setTimestamp(ps, idx++, LocalDateTime.now());
                if (updatePassword) {
                    ps.setString(idx++, user.getPasswordHash());
                }
                ps.setInt(idx++, user.getUserId());
                ps.setString(idx, role);
                return ps.executeUpdate() > 0;
            }
        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, "Failed to update user for role " + role + " id " + user.getUserId(), ex);
            return false;
        }
    }

    public boolean delete(int userId) {
        String sql = "DELETE FROM [USER] WHERE UserID = ? AND Role = ?";
        try (DBContext db = new DBContext()) {
            Connection conn = db.getConnection();
            if (conn == null) {
                LOGGER.log(Level.SEVERE, "Database connection is null when deleting user for role {0}", role);
                return false;
            }
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setInt(1, userId);
                ps.setString(2, role);
                return ps.executeUpdate() > 0;
            }
        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, "Failed to delete user for role " + role + " id " + userId, ex);
            return false;
        }
    }

    private User mapUser(ResultSet rs) throws SQLException {
        User user = new User();
        user.setUserId(rs.getInt("UserID"));
        user.setEmployeeCode(rs.getString("EmployeeCode"));
        user.setFullName(rs.getString("FullName"));
        user.setEmail(rs.getString("Email"));
        user.setPhoneNumber(rs.getString("PhoneNumber"));
        user.setRole(rs.getString("Role"));
        user.setStatus(rs.getString("Status"));
        user.setAddress(rs.getString("Address"));
        Timestamp created = rs.getTimestamp("CreatedAt");
        if (created != null) {
            user.setCreatedAt(created.toLocalDateTime());
        }
        Timestamp updated = rs.getTimestamp("UpdatedAt");
        if (updated != null) {
            user.setUpdatedAt(updated.toLocalDateTime());
        }
        return user;
    }

    private void setTimestamp(PreparedStatement ps, int index, LocalDateTime value) throws SQLException {
        if (value != null) {
            ps.setTimestamp(index, Timestamp.valueOf(value));
        } else {
            ps.setNull(index, Types.TIMESTAMP);
        }
    }

    private String normalizeStatus(String status) {
        return status == null || status.isBlank() ? "Active" : status.trim();
    }
}
